[
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "create_review_graphs",
        "importPath": "helpers.rating_distrubition_reviews",
        "description": "helpers.rating_distrubition_reviews",
        "isExtraImport": true,
        "detail": "helpers.rating_distrubition_reviews",
        "documentation": {}
    },
    {
        "label": "create_sentiment_graph",
        "importPath": "helpers.sentiment_analysis_reviews",
        "description": "helpers.sentiment_analysis_reviews",
        "isExtraImport": true,
        "detail": "helpers.sentiment_analysis_reviews",
        "documentation": {}
    },
    {
        "label": "create_review_trend_graph",
        "importPath": "helpers.trend_reviews_over_time",
        "description": "helpers.trend_reviews_over_time",
        "isExtraImport": true,
        "detail": "helpers.trend_reviews_over_time",
        "documentation": {}
    },
    {
        "label": "create_keyword_graph",
        "importPath": "helpers.keywords_top_reviews",
        "description": "helpers.keywords_top_reviews",
        "isExtraImport": true,
        "detail": "helpers.keywords_top_reviews",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "google.cloud",
        "description": "google.cloud",
        "isExtraImport": true,
        "detail": "google.cloud",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "ast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ast",
        "description": "ast",
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "backend.app",
        "description": "backend.app",
        "isExtraImport": true,
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "search_products",
        "kind": 2,
        "importPath": "backend.api.product_routes",
        "description": "backend.api.product_routes",
        "peekOfCode": "def search_products():\n    query = request.args.get('query', '').lower()\n    filtered_products = [product for product in product_data if query in product['product_name'].lower()]\n    return jsonify(filtered_products)\n# API pour obtenir les détails d'un produit\n@product_routes.route('/api/product_details', methods=['GET'])\ndef product_details():\n    product_url = request.args.get('product_url', '').lower()\n    product = next((product for product in product_data if product['product_link'].lower() == product_url), None)\n    if product is None:",
        "detail": "backend.api.product_routes",
        "documentation": {}
    },
    {
        "label": "product_details",
        "kind": 2,
        "importPath": "backend.api.product_routes",
        "description": "backend.api.product_routes",
        "peekOfCode": "def product_details():\n    product_url = request.args.get('product_url', '').lower()\n    product = next((product for product in product_data if product['product_link'].lower() == product_url), None)\n    if product is None:\n        return jsonify({\"error\": \"Product not found\"}), 404\n    return jsonify(product)",
        "detail": "backend.api.product_routes",
        "documentation": {}
    },
    {
        "label": "product_routes",
        "kind": 5,
        "importPath": "backend.api.product_routes",
        "description": "backend.api.product_routes",
        "peekOfCode": "product_routes = Blueprint('product_routes', __name__)\n# Charger les données produits (si nécessaire, mais tu peux les passer depuis app.py)\nwith open('merged_product_reviews.json', 'r', encoding='utf-8') as f:\n    product_data = json.load(f)\n# API pour rechercher des produits\n@product_routes.route('/api/search_products', methods=['GET'])\ndef search_products():\n    query = request.args.get('query', '').lower()\n    filtered_products = [product for product in product_data if query in product['product_name'].lower()]\n    return jsonify(filtered_products)",
        "detail": "backend.api.product_routes",
        "documentation": {}
    },
    {
        "label": "create_keyword_graph",
        "kind": 2,
        "importPath": "backend.helpers.keywords_top_reviews",
        "description": "backend.helpers.keywords_top_reviews",
        "peekOfCode": "def create_keyword_graph(product_reviews):\n    if not product_reviews or len(product_reviews) == 0:\n        fig, ax = plt.subplots(figsize=(5, 5))\n        ax.text(0.5, 0.5, 'No reviews available', horizontalalignment='center', verticalalignment='center', fontsize=12, color='red')\n        ax.set_title('Top 10 Keywords in Reviews')\n        ax.axis('off')\n        img = BytesIO()\n        plt.savefig(img, format='png')\n        # After saving\n        plt.close(fig)  # This will close the figure and free memory",
        "detail": "backend.helpers.keywords_top_reviews",
        "documentation": {}
    },
    {
        "label": "create_review_graphs",
        "kind": 2,
        "importPath": "backend.helpers.rating_distrubition_reviews",
        "description": "backend.helpers.rating_distrubition_reviews",
        "peekOfCode": "def create_review_graphs(product_reviews):\n    # Vérifier s'il y a des reviews\n    if not product_reviews or len(product_reviews) == 0:\n        # Si pas de critiques, retourner un message par défaut ou un graphique vide\n        fig, ax = plt.subplots(figsize=(5, 5))\n        ax.text(0.5, 0.5, 'No reviews available', horizontalalignment='center', verticalalignment='center', fontsize=12, color='red')\n        ax.set_title('Distribution of Star Ratings')\n        ax.axis('off')  # Enlever les axes\n        img = BytesIO()\n        plt.savefig(img, format='png')",
        "detail": "backend.helpers.rating_distrubition_reviews",
        "documentation": {}
    },
    {
        "label": "create_sentiment_graph",
        "kind": 2,
        "importPath": "backend.helpers.sentiment_analysis_reviews",
        "description": "backend.helpers.sentiment_analysis_reviews",
        "peekOfCode": "def create_sentiment_graph(product_reviews):\n    if not product_reviews or len(product_reviews) == 0:\n        fig, ax = plt.subplots(figsize=(5, 5))\n        ax.text(0.5, 0.5, 'No reviews available', horizontalalignment='center', verticalalignment='center', fontsize=12, color='red')\n        ax.set_title('Sentiment Analysis of Reviews')\n        ax.axis('off')\n        img = BytesIO()\n        plt.savefig(img, format='png')\n        img.seek(0)\n        plot_url2 = base64.b64encode(img.getvalue()).decode()",
        "detail": "backend.helpers.sentiment_analysis_reviews",
        "documentation": {}
    },
    {
        "label": "create_review_trend_graph",
        "kind": 2,
        "importPath": "backend.helpers.trend_reviews_over_time",
        "description": "backend.helpers.trend_reviews_over_time",
        "peekOfCode": "def create_review_trend_graph(product_reviews, interval='Y'):\n    if not product_reviews or len(product_reviews) == 0:\n        fig, ax = plt.subplots(figsize=(5, 5))\n        ax.text(0.5, 0.5, 'No reviews available', horizontalalignment='center', verticalalignment='center', fontsize=12, color='red')\n        ax.set_title('Trend of Reviews Over Time')\n        ax.axis('off')\n        img = BytesIO()\n        plt.savefig(img, format='png')\n        img.seek(0)\n        plot_url3 = base64.b64encode(img.getvalue()).decode()",
        "detail": "backend.helpers.trend_reviews_over_time",
        "documentation": {}
    },
    {
        "label": "download_blob",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def download_blob(bucket_name, source_blob_name, destination_file_name):\n    \"\"\"Télécharge un fichier blob de Cloud Storage vers le système local.\"\"\"\n    storage_client = storage.Client()\n    bucket = storage_client.bucket(bucket_name)\n    blob = bucket.blob(source_blob_name)\n    blob.download_to_filename(destination_file_name)\n    print(f\"Fichier {source_blob_name} téléchargé sur {destination_file_name}.\")\n# Télécharger les fichiers depuis Cloud Storage\n# bucket_name = os.getenv('BUCKET_NAME', 'sublime_bucket_2024')\n# storage_path = os.getenv('STORAGE_PATH', 'data-test-api-application')",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def index():\n    return render_template('home.html')\n# Route to the search page\n@app.route('/search')\ndef search_page():\n    return render_template('index.html')\n# Route to search for products by name\n@app.route('/search_products', methods=['GET'])\ndef search_products():\n    query = request.args.get('query', '').lower()",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "search_page",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def search_page():\n    return render_template('index.html')\n# Route to search for products by name\n@app.route('/search_products', methods=['GET'])\ndef search_products():\n    query = request.args.get('query', '').lower()\n    filtered_products = [product for product in product_data if query in product['product_name'].lower()]\n    product_list = [{'product_name': product['product_name'], 'product_link': product['product_link']} for product in filtered_products]\n    return jsonify(product_list)\n# Route to show product details in a separate page",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "search_products",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def search_products():\n    query = request.args.get('query', '').lower()\n    filtered_products = [product for product in product_data if query in product['product_name'].lower()]\n    product_list = [{'product_name': product['product_name'], 'product_link': product['product_link']} for product in filtered_products]\n    return jsonify(product_list)\n# Route to show product details in a separate page\n@app.route('/product/<path:product_url>', methods=['GET'])\ndef product_details(product_url):\n    product_url = product_url.strip().lower().rstrip('/')\n    product = next((product for product in product_data if product['product_link'].strip().lower().rstrip('/') == product_url), None)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "product_details",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def product_details(product_url):\n    product_url = product_url.strip().lower().rstrip('/')\n    product = next((product for product in product_data if product['product_link'].strip().lower().rstrip('/') == product_url), None)\n    if product is None:\n        return render_template('404.html'), 404\n    # Timing the graph generation\n    start_time = time.time()\n    # Get the interval from the request parameters (default to 'Y' for Year)\n    interval = request.args.get('interval', 'Y')\n    plot_url = create_review_graphs(product['reviews'])",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "start_time = time.time()\n# Adjust paths to refer to frontend from the backend directory\napp = Flask(\n    __name__,\n    template_folder=os.path.join(os.getcwd(), '..', 'frontend', 'templates'),\n    static_folder=os.path.join(os.getcwd(), '..', 'frontend', 'static')\n)\nprint(\"Template folder:\", app.template_folder)\nfrom google.cloud import storage\nimport tempfile",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "app = Flask(\n    __name__,\n    template_folder=os.path.join(os.getcwd(), '..', 'frontend', 'templates'),\n    static_folder=os.path.join(os.getcwd(), '..', 'frontend', 'static')\n)\nprint(\"Template folder:\", app.template_folder)\nfrom google.cloud import storage\nimport tempfile\n# Fonction pour télécharger un fichier depuis un bucket Google Cloud Storage\ndef download_blob(bucket_name, source_blob_name, destination_file_name):",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "bucket_name",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "bucket_name = os.getenv('BUCKET_NAME', 'sublime_bucket_bis')\nstorage_path = os.getenv('STORAGE_PATH', '10/reviews')\njson_file_name = 'merged_product_reviews.json'\nsource_blob_name = f'{storage_path}/{json_file_name}'\n# destination_file_name = f'/tmp/{json_file_name}'\ndestination_file_name = os.path.join(tempfile.gettempdir(), json_file_name)\n# Télécharger le fichier JSON dans /tmp pour utilisation locale\ndownload_blob(bucket_name, source_blob_name, destination_file_name)\n# Charger les données JSON\njson_file_path = destination_file_name",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "storage_path",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "storage_path = os.getenv('STORAGE_PATH', '10/reviews')\njson_file_name = 'merged_product_reviews.json'\nsource_blob_name = f'{storage_path}/{json_file_name}'\n# destination_file_name = f'/tmp/{json_file_name}'\ndestination_file_name = os.path.join(tempfile.gettempdir(), json_file_name)\n# Télécharger le fichier JSON dans /tmp pour utilisation locale\ndownload_blob(bucket_name, source_blob_name, destination_file_name)\n# Charger les données JSON\njson_file_path = destination_file_name\nif os.path.exists(json_file_path):",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "json_file_name",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "json_file_name = 'merged_product_reviews.json'\nsource_blob_name = f'{storage_path}/{json_file_name}'\n# destination_file_name = f'/tmp/{json_file_name}'\ndestination_file_name = os.path.join(tempfile.gettempdir(), json_file_name)\n# Télécharger le fichier JSON dans /tmp pour utilisation locale\ndownload_blob(bucket_name, source_blob_name, destination_file_name)\n# Charger les données JSON\njson_file_path = destination_file_name\nif os.path.exists(json_file_path):\n    with open(json_file_path, 'r', encoding='utf-8') as f:",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "source_blob_name",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "source_blob_name = f'{storage_path}/{json_file_name}'\n# destination_file_name = f'/tmp/{json_file_name}'\ndestination_file_name = os.path.join(tempfile.gettempdir(), json_file_name)\n# Télécharger le fichier JSON dans /tmp pour utilisation locale\ndownload_blob(bucket_name, source_blob_name, destination_file_name)\n# Charger les données JSON\njson_file_path = destination_file_name\nif os.path.exists(json_file_path):\n    with open(json_file_path, 'r', encoding='utf-8') as f:\n        product_data = json.load(f)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "destination_file_name",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "destination_file_name = os.path.join(tempfile.gettempdir(), json_file_name)\n# Télécharger le fichier JSON dans /tmp pour utilisation locale\ndownload_blob(bucket_name, source_blob_name, destination_file_name)\n# Charger les données JSON\njson_file_path = destination_file_name\nif os.path.exists(json_file_path):\n    with open(json_file_path, 'r', encoding='utf-8') as f:\n        product_data = json.load(f)\nelse:\n    raise FileNotFoundError(f\"{json_file_path} not found. Ensure the file exists.\")",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "json_file_path",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "json_file_path = destination_file_name\nif os.path.exists(json_file_path):\n    with open(json_file_path, 'r', encoding='utf-8') as f:\n        product_data = json.load(f)\nelse:\n    raise FileNotFoundError(f\"{json_file_path} not found. Ensure the file exists.\")\n# Log time taken to load product data\nprint(f\"Time to load product data: {time.time() - start_time:.4f} seconds\")\n# Home route (Index page with project introduction)\n@app.route('/')",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "py_file_path",
        "kind": 5,
        "importPath": "backend.merging_py_and_csv_in_json",
        "description": "backend.merging_py_and_csv_in_json",
        "peekOfCode": "py_file_path = 'url_dump_2024_09_23_17_12_10.py'\n# Read the Python file contents\nwith open(py_file_path, 'r', encoding='utf-8') as f:\n    py_content = f.read()\n# Extract the product data from the Python file\nproduct_data_str = py_content.split(\"CATEGORIES = \")[1]\nproduct_data = ast.literal_eval(product_data_str)  # Safely evaluate the Python list\n# Convert product data to a DataFrame\nproduct_df = pd.DataFrame(product_data, columns=['url', 'name', 'rating_star', 'rating_nb_reviews', 'price'])\n# Step 2: Load review data from the CSV file (output_with_sentiments_keywords.csv)",
        "detail": "backend.merging_py_and_csv_in_json",
        "documentation": {}
    },
    {
        "label": "product_data_str",
        "kind": 5,
        "importPath": "backend.merging_py_and_csv_in_json",
        "description": "backend.merging_py_and_csv_in_json",
        "peekOfCode": "product_data_str = py_content.split(\"CATEGORIES = \")[1]\nproduct_data = ast.literal_eval(product_data_str)  # Safely evaluate the Python list\n# Convert product data to a DataFrame\nproduct_df = pd.DataFrame(product_data, columns=['url', 'name', 'rating_star', 'rating_nb_reviews', 'price'])\n# Step 2: Load review data from the CSV file (output_with_sentiments_keywords.csv)\ncsv_file_path = 'output_with_sentiments_keywords.csv'\nreview_df = pd.read_csv(csv_file_path, sep=';')\n# Step 3: Normalize URLs in both DataFrames (lowercase and remove trailing slashes, ensure https)\nproduct_df['url'] = product_df['url'].str.lower().str.rstrip('/').str.replace('http://', 'https://')\nreview_df['review_url_src'] = review_df['review_url_src'].str.lower().str.rstrip('/').str.replace('http://', 'https://')",
        "detail": "backend.merging_py_and_csv_in_json",
        "documentation": {}
    },
    {
        "label": "product_data",
        "kind": 5,
        "importPath": "backend.merging_py_and_csv_in_json",
        "description": "backend.merging_py_and_csv_in_json",
        "peekOfCode": "product_data = ast.literal_eval(product_data_str)  # Safely evaluate the Python list\n# Convert product data to a DataFrame\nproduct_df = pd.DataFrame(product_data, columns=['url', 'name', 'rating_star', 'rating_nb_reviews', 'price'])\n# Step 2: Load review data from the CSV file (output_with_sentiments_keywords.csv)\ncsv_file_path = 'output_with_sentiments_keywords.csv'\nreview_df = pd.read_csv(csv_file_path, sep=';')\n# Step 3: Normalize URLs in both DataFrames (lowercase and remove trailing slashes, ensure https)\nproduct_df['url'] = product_df['url'].str.lower().str.rstrip('/').str.replace('http://', 'https://')\nreview_df['review_url_src'] = review_df['review_url_src'].str.lower().str.rstrip('/').str.replace('http://', 'https://')\n# Step 4: Create a dictionary for the CSV file reviews",
        "detail": "backend.merging_py_and_csv_in_json",
        "documentation": {}
    },
    {
        "label": "product_df",
        "kind": 5,
        "importPath": "backend.merging_py_and_csv_in_json",
        "description": "backend.merging_py_and_csv_in_json",
        "peekOfCode": "product_df = pd.DataFrame(product_data, columns=['url', 'name', 'rating_star', 'rating_nb_reviews', 'price'])\n# Step 2: Load review data from the CSV file (output_with_sentiments_keywords.csv)\ncsv_file_path = 'output_with_sentiments_keywords.csv'\nreview_df = pd.read_csv(csv_file_path, sep=';')\n# Step 3: Normalize URLs in both DataFrames (lowercase and remove trailing slashes, ensure https)\nproduct_df['url'] = product_df['url'].str.lower().str.rstrip('/').str.replace('http://', 'https://')\nreview_df['review_url_src'] = review_df['review_url_src'].str.lower().str.rstrip('/').str.replace('http://', 'https://')\n# Step 4: Create a dictionary for the CSV file reviews\nreviews_dict = {}\n# Iterate through the review DataFrame and add each review to the corresponding URL",
        "detail": "backend.merging_py_and_csv_in_json",
        "documentation": {}
    },
    {
        "label": "csv_file_path",
        "kind": 5,
        "importPath": "backend.merging_py_and_csv_in_json",
        "description": "backend.merging_py_and_csv_in_json",
        "peekOfCode": "csv_file_path = 'output_with_sentiments_keywords.csv'\nreview_df = pd.read_csv(csv_file_path, sep=';')\n# Step 3: Normalize URLs in both DataFrames (lowercase and remove trailing slashes, ensure https)\nproduct_df['url'] = product_df['url'].str.lower().str.rstrip('/').str.replace('http://', 'https://')\nreview_df['review_url_src'] = review_df['review_url_src'].str.lower().str.rstrip('/').str.replace('http://', 'https://')\n# Step 4: Create a dictionary for the CSV file reviews\nreviews_dict = {}\n# Iterate through the review DataFrame and add each review to the corresponding URL\nfor index, row in review_df.iterrows():\n    url = row['review_url_src']",
        "detail": "backend.merging_py_and_csv_in_json",
        "documentation": {}
    },
    {
        "label": "review_df",
        "kind": 5,
        "importPath": "backend.merging_py_and_csv_in_json",
        "description": "backend.merging_py_and_csv_in_json",
        "peekOfCode": "review_df = pd.read_csv(csv_file_path, sep=';')\n# Step 3: Normalize URLs in both DataFrames (lowercase and remove trailing slashes, ensure https)\nproduct_df['url'] = product_df['url'].str.lower().str.rstrip('/').str.replace('http://', 'https://')\nreview_df['review_url_src'] = review_df['review_url_src'].str.lower().str.rstrip('/').str.replace('http://', 'https://')\n# Step 4: Create a dictionary for the CSV file reviews\nreviews_dict = {}\n# Iterate through the review DataFrame and add each review to the corresponding URL\nfor index, row in review_df.iterrows():\n    url = row['review_url_src']\n    # If the URL is not in the dictionary, initialize an empty list",
        "detail": "backend.merging_py_and_csv_in_json",
        "documentation": {}
    },
    {
        "label": "product_df['url']",
        "kind": 5,
        "importPath": "backend.merging_py_and_csv_in_json",
        "description": "backend.merging_py_and_csv_in_json",
        "peekOfCode": "product_df['url'] = product_df['url'].str.lower().str.rstrip('/').str.replace('http://', 'https://')\nreview_df['review_url_src'] = review_df['review_url_src'].str.lower().str.rstrip('/').str.replace('http://', 'https://')\n# Step 4: Create a dictionary for the CSV file reviews\nreviews_dict = {}\n# Iterate through the review DataFrame and add each review to the corresponding URL\nfor index, row in review_df.iterrows():\n    url = row['review_url_src']\n    # If the URL is not in the dictionary, initialize an empty list\n    if url not in reviews_dict:\n        reviews_dict[url] = []",
        "detail": "backend.merging_py_and_csv_in_json",
        "documentation": {}
    },
    {
        "label": "review_df['review_url_src']",
        "kind": 5,
        "importPath": "backend.merging_py_and_csv_in_json",
        "description": "backend.merging_py_and_csv_in_json",
        "peekOfCode": "review_df['review_url_src'] = review_df['review_url_src'].str.lower().str.rstrip('/').str.replace('http://', 'https://')\n# Step 4: Create a dictionary for the CSV file reviews\nreviews_dict = {}\n# Iterate through the review DataFrame and add each review to the corresponding URL\nfor index, row in review_df.iterrows():\n    url = row['review_url_src']\n    # If the URL is not in the dictionary, initialize an empty list\n    if url not in reviews_dict:\n        reviews_dict[url] = []\n    # Append the review data as a dictionary of values to the dictionary",
        "detail": "backend.merging_py_and_csv_in_json",
        "documentation": {}
    },
    {
        "label": "reviews_dict",
        "kind": 5,
        "importPath": "backend.merging_py_and_csv_in_json",
        "description": "backend.merging_py_and_csv_in_json",
        "peekOfCode": "reviews_dict = {}\n# Iterate through the review DataFrame and add each review to the corresponding URL\nfor index, row in review_df.iterrows():\n    url = row['review_url_src']\n    # If the URL is not in the dictionary, initialize an empty list\n    if url not in reviews_dict:\n        reviews_dict[url] = []\n    # Append the review data as a dictionary of values to the dictionary\n    reviews_dict[url].append({\n        \"review_stars\": row['review_stars'],",
        "detail": "backend.merging_py_and_csv_in_json",
        "documentation": {}
    },
    {
        "label": "merged_output",
        "kind": 5,
        "importPath": "backend.merging_py_and_csv_in_json",
        "description": "backend.merging_py_and_csv_in_json",
        "peekOfCode": "merged_output = []\nfor index, product_row in product_df.iterrows():\n    product_url = product_row['url']\n    product_name = product_row['name']\n    # Find matching reviews for this product URL from the reviews_dict\n    product_reviews = reviews_dict.get(product_url, [])\n    # Merge the product information with the reviews for that product\n    merged_output.append({\n        'product_name': product_name,\n        'price': product_row['price'],",
        "detail": "backend.merging_py_and_csv_in_json",
        "documentation": {}
    },
    {
        "label": "output_file_path",
        "kind": 5,
        "importPath": "backend.merging_py_and_csv_in_json",
        "description": "backend.merging_py_and_csv_in_json",
        "peekOfCode": "output_file_path = 'merged_product_reviews.json'\nwith open(output_file_path, 'w', encoding='utf-8') as f:\n    json.dump(merged_output, f, ensure_ascii=False, indent=4)\nprint(f\"Merged product and review data saved to {output_file_path}\")",
        "detail": "backend.merging_py_and_csv_in_json",
        "documentation": {}
    },
    {
        "label": "CATEGORIES",
        "kind": 5,
        "importPath": "backend.url_dump_2024_09_23_17_12_10",
        "description": "backend.url_dump_2024_09_23_17_12_10",
        "peekOfCode": "CATEGORIES = [ \n['https://www.dermstore.com/obagi-medical-c-fx-c-clarifying-serum/11288929.html', 'Obagi Medical Obagi-C Fx System C-Clarifying Serum (1 oz.)', '4.5', '40', '$135.00'],\n['https://www.dermstore.com/obagi-medical-hydrate-facial-moisturizer/11291537.html', 'Obagi Medical Hydrate Facial Moisturizer (1.7 oz.)', '4.8', '362', '$58.00'],\n['https://www.dermstore.com/obagi-medical-nu-derm-clear-fx/11288915.html', 'Obagi Medical Nu-Derm Clear Fx (2 oz.)', '4.6', '149', '$113.00'],\n['https://www.dermstore.com/skinceuticals-c-e-ferulic-with-15-l-ascorbic-acid-vitamin-c-serum-30ml/11289609.html', 'SkinCeuticals C E Ferulic', '4.7', '5362', '$182.00'],\n['https://www.dermstore.com/skinmedica-tns-advanced-serum-28.4g/12596429.html', 'SkinMedica TNS Advanced+ Serum', '4.3', '473', '$295.00'],\n['https://www.dermstore.com/eltamd-uv-clear-spf46-broad-spectrum-duo/12538013.html', 'EltaMD Exclusive UV Clear SPF 46 Broad-Spectrum Duo', '4.8', '5131', '$73.00'],\n['https://www.dermstore.com/skinceuticals-triple-lipid-restore-2-4-2/11290635.html', 'SkinCeuticals Triple Lipid Restore 242', '4.8', '2061', '$155.00'],\n['https://www.dermstore.com/skinmedica-ha5-hydra-collagen-replenish-and-restore-hydrator-60ml/15449378.html', 'SkinMedica HA5 Hydra Collagen Replenish and Restore Hydrator 60ml', '3.0', '1', '$192.00'],\n['https://www.dermstore.com/neocutis-lumiere-firm-riche-extra-moisturizing-illuminating-and-tightening-eye-cream-15ml/12664555.html', 'Neocutis LUMIÈRE FIRM RICHE Extra Moisturizing Illuminating & Tightening Eye Cream', '4.7', '156', '$125.00'],",
        "detail": "backend.url_dump_2024_09_23_17_12_10",
        "documentation": {}
    }
]